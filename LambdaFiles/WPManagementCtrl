import boto3
import json
import os

# É uma boa prática definir a região, seja por variável de ambiente ou hardcoded se for sempre a mesma.
# Se a Lambda e as EC2 estiverem na mesma região, o Boto3 geralmente a infere.
# AWS_REGION = os.environ.get('AWS_REGION', 'sua-regiao-padrao') # Ex: 'us-east-1'
# ec2_client = boto3.client('ec2', region_name=AWS_REGION)

ec2_client = boto3.client('ec2') # Tenta inferir a região do ambiente de execução da Lambda

def find_instance_by_tag_name(tag_value):
    """
    Encontra o ID de uma instância EC2 baseando-se no valor da tag 'Name'.
    Retorna o ID da primeira instância encontrada ou None.
    """
    print(f"Procurando por instância com tag Name='{tag_value}'")
    try:
        response = ec2_client.describe_instances(
            Filters=[
                {
                    'Name': 'tag:Name', # A chave da tag é 'Name'
                    'Values': [tag_value]
                },
                {
                    'Name': 'instance-state-name', # Considerar apenas instâncias que podem ser iniciadas/paradas
                    'Values': ['pending', 'running', 'shutting-down', 'stopped', 'stopping']
                }
            ]
        )
        
        instances_found = []
        for reservation in response['Reservations']:
            for instance in reservation['Instances']:
                instances_found.append(instance['InstanceId'])
        
        if not instances_found:
            print(f"Nenhuma instância encontrada com tag Name='{tag_value}'")
            return None
        
        if len(instances_found) > 1:
            print(f"Aviso: Múltiplas instâncias ({len(instances_found)}) encontradas com tag Name='{tag_value}'. Usando a primeira: {instances_found[0]}")
        
        print(f"Instância encontrada: {instances_found[0]}")
        return instances_found[0] # Retorna o ID da primeira instância encontrada

    except Exception as e:
        print(f"Erro ao descrever instâncias: {str(e)}")
        raise e

def lambda_handler(event, context):
    """
    Handler principal da função Lambda.
    Espera 'tag_value' e 'action' no evento.
    'action' pode ser 'start' ou 'stop'.
    """
    print(f"Evento recebido: {json.dumps(event)}")

    try:
        # tag_key = event.get('tag_key', 'Name') # Se você quiser tornar a chave da tag configurável
        tag_value = event['tag_value'] # Valor da tag 'Name' da instância
        action = event['action'].lower()   # 'start' ou 'stop', normalizado para minúsculas
    except KeyError as e:
        error_message = f"Parâmetro ausente no evento: {str(e)}. Evento esperado: {{'tag_value': 'NOME_DA_INSTANCIA', 'action': 'start|stop'}}"
        print(error_message)
        return {
            'statusCode': 400,
            'body': json.dumps({'error': error_message})
        }

    if action not in ['start', 'stop']:
        error_message = f"Ação inválida: '{action}'. Ações permitidas são 'start' ou 'stop'."
        print(error_message)
        return {
            'statusCode': 400,
            'body': json.dumps({'error': error_message})
        }

    instance_id = find_instance_by_tag_name(tag_value)

    if not instance_id:
        message = f"Nenhuma instância EC2 encontrada com a tag Name='{tag_value}'."
        print(message)
        return {
            'statusCode': 404, # Not Found
            'body': json.dumps({'message': message})
        }

    try:
        if action == 'start':
            print(f"Iniciando instância: {instance_id}")
            response = ec2_client.start_instances(InstanceIds=[instance_id])
            print(f"Resposta de start_instances: {response}")
            message = f"Comando para iniciar a instância {instance_id} (Name: {tag_value}) enviado com sucesso."
        
        elif action == 'stop':
            print(f"Parando instância: {instance_id}")
            response = ec2_client.stop_instances(InstanceIds=[instance_id])
            print(f"Resposta de stop_instances: {response}")
            message = f"Comando para parar a instância {instance_id} (Name: {tag_value}) enviado com sucesso."
        
        return {
            'statusCode': 200,
            'body': json.dumps({'message': message, 'instance_id': instance_id})
        }

    except Exception as e:
        error_message = f"Erro ao executar ação '{action}' na instância {instance_id}: {str(e)}"
        print(error_message)
        return {
            'statusCode': 500,
            'body': json.dumps({'error': error_message, 'instance_id': instance_id})
        }
